#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>

void initVVPAT();

Adafruit_SSD1306 display(128, 64, &Wire, -1);

const int poll_1 = 14;    //D5 //CPIM
const int poll_2 = 12;    //D6 //BJP
const int poll_3 = 13;    //D7 //TMC

const unsigned char myBitmap [3][200] PROGMEM = {
  {0xfc, 0x3f, 0xff, 0xff, 0xff, 0xf3, 0xcf, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xef, 
  0xf7, 0xf1, 0xff, 0xff, 0xef, 0xfb, 0xc6, 0x7f, 0xff, 0xef, 0xfb, 0xbf, 0xbf, 0xff, 0xef, 0xfc, 
  0x7f, 0x9f, 0xff, 0xef, 0xfc, 0xff, 0xdf, 0xff, 0xf7, 0x3d, 0xff, 0xdf, 0xff, 0xf3, 0xc9, 0xcf, 
  0xdf, 0xff, 0xf9, 0xe9, 0x9f, 0x9f, 0xff, 0xfc, 0xf0, 0x7f, 0xbf, 0xff, 0xfc, 0x00, 0xfe, 0x7f, 
  0xff, 0xf3, 0x8e, 0x7c, 0xff, 0xff, 0xcf, 0xce, 0x03, 0xf8, 0x3f, 0xdf, 0x84, 0xf0, 0xf3, 0xdf, 
  0xbe, 0x60, 0xef, 0x37, 0xcf, 0x7e, 0xec, 0xdf, 0x8f, 0xef, 0x7f, 0xec, 0x5f, 0xcf, 0xef, 0x7f, 
  0xce, 0x5f, 0xef, 0xef, 0x7f, 0xde, 0x1e, 0x6b, 0xdf, 0x7f, 0x9f, 0x0f, 0x2b, 0xdf, 0xbf, 0x3f, 
  0x07, 0xc3, 0x3f, 0xde, 0x7f, 0x99, 0xc0, 0x7f, 0xe1, 0xff, 0x9e, 0x18, 0x7f, 0xff, 0xff, 0x8f, 
  0xd3, 0x3f, 0xff, 0xff, 0xcf, 0xc1, 0xdf, 0xff, 0xff, 0xcf, 0x94, 0xef, 0xff, 0xff, 0xc7, 0x36, 
  0xf7, 0xff, 0xff, 0xc4, 0x37, 0xf7, 0xff, 0xff, 0xc0, 0x77, 0xf7, 0xff, 0xff, 0xc0, 0xf3, 0xf7, 
  0xff, 0xff, 0xe3, 0xf9, 0xe7, 0xff, 0xdf, 0xe3, 0xfc, 0x4f, 0xff, 0xef, 0xe3, 0xff, 0x3f, 0xff, 
  0xdd, 0xe1, 0xfe, 0xff, 0xff, 0xdd, 0xa1, 0x9c, 0xff, 0xff, 0xd7, 0xc1, 0x5b, 0xbf, 0xff, 0xd2, 
  0x40, 0xd6, 0x7f, 0xff, 0xff, 0xe1, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 
   0xf1, 0xfe, 0x3f, 0xff, 0xff, 0xcf, 0xff, 0xcf, 0xff, 0xff, 0x3f, 0xff, 0xf3, 0xff, 0xfe, 0x7f, 
  0xff, 0xf9, 0xff, 0xfc, 0xff, 0xff, 0xfe, 0xff, 0xf9, 0xff, 0xff, 0xfe, 0x7f, 0xf3, 0xfb, 0xef, 
  0x3f, 0x3f, 0xf7, 0x08, 0xc4, 0x23, 0xbf, 0xe7, 0x62, 0x51, 0x1b, 0xdf, 0xef, 0xb3, 0x3b, 0x33, 
  0xdf, 0xcf, 0xbb, 0x3b, 0xb7, 0xef, 0xdf, 0xbb, 0x7d, 0xb3, 0xef, 0xdf, 0xbb, 0x7d, 0xb3, 0xef, 
  0xdf, 0xbb, 0x7d, 0xb3, 0xe7, 0x9f, 0x9a, 0xfd, 0xb7, 0xf7, 0x9f, 0xdb, 0xfd, 0xb7, 0xf7, 0x9f, 
  0xc9, 0x7d, 0xaf, 0xf7, 0x9f, 0xe0, 0x79, 0x4f, 0xf7, 0x9f, 0xe7, 0x10, 0x0f, 0xf7, 0xdf, 0xe7, 
  0x6d, 0xcf, 0xe7, 0xdf, 0xf9, 0x7d, 0xbf, 0xef, 0xdf, 0xfe, 0x30, 0x7f, 0xef, 0xcf, 0xff, 0xc7, 
  0xff, 0xef, 0xef, 0xff, 0xcf, 0xff, 0xdf, 0xe7, 0xff, 0xcf, 0xff, 0xdf, 0xf7, 0xff, 0xcf, 0xff, 
  0x9f, 0xf3, 0xff, 0xcf, 0xff, 0x3f, 0xf9, 0xfe, 0x09, 0xff, 0x7f, 0xfc, 0xfe, 0x21, 0xfe, 0xff, 
  0xfe, 0x7e, 0x41, 0xf9, 0xff, 0xff, 0x3f, 0xff, 0xf3, 0xff, 0xff, 0xcf, 0xff, 0xc7, 0xff, 0xff, 
  0xe3, 0xff, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 
 0xff, 0xff, 0x39, 0xff, 0xff, 0xff, 0xff, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xe0, 
  0x3e, 0x3f, 0xff, 0xff, 0xc0, 0x7e, 0x3f, 0xff, 0xff, 0x80, 0xff, 0x1f, 0xff, 0xff, 0x01, 0xff, 
  0x1f, 0xff, 0xfe, 0x03, 0xff, 0x1f, 0xff, 0xfc, 0x03, 0xff, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0x1f, 
  0xff, 0xfc, 0x18, 0xff, 0x0f, 0xff, 0xfe, 0x3c, 0x7f, 0x0f, 0xff, 0xff, 0xfe, 0x3e, 0x0f, 0xff, 
  0xff, 0xfe, 0x1e, 0x0f, 0xff, 0xff, 0xff, 0x0c, 0x1f, 0xff, 0x7f, 0xff, 0x84, 0x1f, 0xfe, 0x3f, 
  0xff, 0xc0, 0x1f, 0xfc, 0x1f, 0xff, 0xe0, 0x1f, 0xf8, 0x07, 0xff, 0xe0, 0x3f, 0xf0, 0xc3, 0xff, 
  0xc0, 0x3f, 0xe0, 0xe0, 0xff, 0x00, 0x7f, 0xe1, 0xf8, 0x00, 0x00, 0x3f, 0xc3, 0xfc, 0x00, 0x00, 
  0x1f, 0x87, 0xff, 0x00, 0x03, 0x0f, 0x87, 0xff, 0xc0, 0x0f, 0x87, 0xcf, 0xff, 0xff, 0xff, 0xc3, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
};

void writeEEPROM(int address)
{ 
  // Read available count in the address of EEPROM
  byte byte1 = EEPROM.read(address);
  byte byte2 = EEPROM.read(address + 1);
  int number = (byte1 << 8) + byte2;
  number++;

  // Writing operation
  EEPROM.write(address, number >> 8);
  EEPROM.write(address + 1, number & 0xFF);
  EEPROM.commit();
}


void setup()   
{
  initVVPAT();
  EEPROM.begin(512);
  Serial.begin(115200);
  pinMode(poll_1, INPUT_PULLUP);
  pinMode(poll_2, INPUT_PULLUP);
  pinMode(poll_3, INPUT_PULLUP);
}

void loop()
{
      int a,b,c;
      a=digitalRead(poll_1);
      b=digitalRead(poll_2);
      c=digitalRead(poll_3);
      if(a==0)
      {
        Serial.println("You voted for CPI(M) Alliance.");
        writeEEPROM(300);
        
        display.clearDisplay();
        display.drawBitmap(44,16, myBitmap[2], 40, 40, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
        display.display();
        delay(2000);
        display.clearDisplay();
        delay(4000);
        return;
      }
      if(b==0)
      {
        Serial.println("You voted for BJP");
//        Serial.println(digitalRead(poll_2));
        writeEEPROM(200);
        display.clearDisplay();
        display.drawBitmap(44,16, myBitmap[1], 40, 40, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
        display.display();
        delay(2000);
        display.clearDisplay();
        delay(4000);
        return;
      }
      if(c==0)
      {
        Serial.println("You voted for TMC.");
//        Serial.println(digitalRead(poll_3));
        writeEEPROM(100);
        display.clearDisplay();
        display.drawBitmap(44,16, myBitmap[0], 40, 40, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
        display.display();
        delay(2000);
        display.clearDisplay();
        delay(4000);
        return;
      }
      initVVPAT();
      display.display();
}

void initVVPAT()
{
  // initialize with the I2C addr 0x3C
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  

  // Clear the buffer.
  display.clearDisplay();
}
